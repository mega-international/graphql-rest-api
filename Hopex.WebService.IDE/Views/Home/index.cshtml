<!DOCTYPE html>

<html>

<head>

    <style>
        body {
            height: 100%;
            margin: 0;
            width: 100%;
            overflow: hidden;
        }

        #graphiql {
            height: 100vh;
        }
    </style>

    <script src="~/lib/es6-promise/es6-promise.auto.min.js"></script>
    <script src="~/lib/fetch/fetch.min.js"></script>
    <script src="~/lib/react/umd/react.production.min.js"></script>
    <script src="~/lib/react-dom/umd/react-dom.production.min.js"></script>
    <link rel="stylesheet" href="~/assets/graphiql.css" />
    <script src="~/assets/graphiql.js"></script>

</head>

<body>

    <div id="graphiql">Loading...</div>

    <script>

    // Parse the search string to get url parameters.
    var search = window.location.search;
    var parameters = {};
    search.substr(1).split('&').forEach(function(entry) {
        var eq = entry.indexOf('=');
        if (eq >= 0) {
            parameters[decodeURIComponent(entry.slice(0, eq))] =
                decodeURIComponent(entry.slice(eq + 1));
        }
    });

    // if variables was provided, try to format it.
    if (parameters.variables) {
        try {
            parameters.variables =
                JSON.stringify(JSON.parse(parameters.variables), null, 2);
        } catch (e) {
            // Do nothing, we want to display the invalid JSON as a string, rather than present an error.
        }
    }

    // When the query and variables string is edited, update the URL bar so that it can be easily shared
    function onEditQuery(newQuery) {
        parameters.query = newQuery;
        updateURL();
    }

    function onEditVariables(newVariables) {
        parameters.variables = newVariables;
        updateURL();
    }

    function onEditOperationName(newOperationName) {
        parameters.operationName = newOperationName;
        updateURL();
    }

    function updateURL() {
    }

    // Pour un login via le client, voir : https://github.com/IdentityServer/IdentityServer4/tree/master/samples/Quickstarts/4_JavaScriptClient/src/JavaScriptClient

    // Defines a GraphQL fetcher using the fetch API. You're not required to
    // use fetch, and could instead implement graphQLFetcher however you like,
    // as long as it returns a Promise or Observable.
    function graphQLFetcher(graphQLParams) {
        // var e = document.getElementById("schema");
        // var schema = e.options[e.selectedIndex].value;
        return fetch('/graphql-ide/graphql/@ViewBag.Schemas.SelectedValue',
            {
                method: 'post',
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(graphQLParams),
                credentials: 'include',
            }).then(function (response) {
                if (response.ok) {
                    return response.text().then(function (responseBody) {
                        try {
                            return JSON.parse(responseBody);
                        } catch (error) {
                            return responseBody;
                        }
                    });
                }
                else {
                    goto('/graphql-ide/home/closesession')
                }
            });
    }

    var main = React.createElement(GraphiQL,
        {
            fetcher: graphQLFetcher,
            query: parameters.query,
            variables: parameters.variables,
            operationName: parameters.operationName,
            onEditQuery: onEditQuery,
            onEditVariables: onEditVariables,
            onEditOperationName: onEditOperationName
        },
        React.createElement(GraphiQL.Toolbar, null,
            React.createElement(GraphiQL.Select,
                {
                    label: 'Schema',
                    onSelect: (schema) =>
                    {
                        window.location = '/graphql-ide/home/index/' + schema;
                    }
                },
                React.createElement(GraphiQL.SelectOption, { label: '@ViewBag.Schemas.SelectedValue', value: '@ViewBag.Schemas.SelectedValue' }),
                @foreach (var schema in ViewBag.Schemas.Items)
                {
                    if (schema != ViewBag.Schemas.SelectedValue)
                    {
                        <text>React.createElement(GraphiQL.SelectOption, { label: '@schema', value: '@schema' }),</text>
                    }
                }
            ),
            @if(ViewBag.IsVoyagerEnabled)
            {
                <text>React.createElement(GraphiQL.Button, { label: "Voyager", onClick: () => goto('/graphql-ide/home/voyager/@ViewBag.Schemas.SelectedValue') }),</text>
            }
            React.createElement(GraphiQL.Button, { label: "Close session", onClick: () => goto('/graphql-ide/home/closesession') })
        )
    );

    ReactDOM.render(
        main,
        document.getElementById('graphiql')
    );

    function goto(url) {
        location.href = url;
    }

    </script>

</body>

</html>
