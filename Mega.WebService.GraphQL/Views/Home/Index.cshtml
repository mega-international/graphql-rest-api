@model Mega.WebService.GraphQL.Models.HopexInfo

<!DOCTYPE html>

<html>

<head>

    <style>
        body {
            height: 100%;
            margin: 0;
            width: 100%;
            overflow: hidden;
        }

        #graphiql {
            height: 100vh;
        }
    </style>

    <script src="https://cdn.jsdelivr.net/es6-promise/4.0.5/es6-promise.auto.min.js"></script>
    <script src="https://cdn.jsdelivr.net/fetch/0.9.0/fetch.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/react@16/umd/react.production.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/react-dom@16/umd/react-dom.production.min.js"></script>
    <link rel="stylesheet" href="~/Content/graphiql.css" />
    <script src="~/Content/graphiql.js"></script>

</head>

<body>

    <div id="graphiql">Loading...</div>

    <script>

    var uasUrl = '@Model.UasUrl';
    var environmentId = '@Model.EnvironmentId';
    var repositoryId = '@Model.RepositoryId';
    var profileId = '@Model.ProfileId';
    var login = '@Model.Login';
    var password = '@Model.Password';

    // Parse the search string to get url parameters.
    var search = window.location.search;
    var parameters = {};
    search.substr(1).split('&').forEach(function(entry) {
        var eq = entry.indexOf('=');
        if (eq >= 0) {
            parameters[decodeURIComponent(entry.slice(0, eq))] =
                decodeURIComponent(entry.slice(eq + 1));
        }
    });

    // if variables was provided, try to format it.
    if (parameters.variables) {
        try {
            parameters.variables =
                JSON.stringify(JSON.parse(parameters.variables), null, 2);
        } catch (e) {
            // Do nothing, we want to display the invalid JSON as a string, rather than present an error.
        }
    }

    // When the query and variables string is edited, update the URL bar so that it can be easily shared
    function onEditQuery(newQuery) {
        parameters.query = newQuery;
        updateURL();
    }

    function onEditVariables(newVariables) {
        parameters.variables = newVariables;
        updateURL();
    }

    function onEditOperationName(newOperationName) {
        parameters.operationName = newOperationName;
        updateURL();
    }

    function getToken(url, environmentId, login, password) {
        var details = {
            'grant_type': 'password',
            'scope': 'hopex openid read write',
            'username': login,
            'password': password,
            'client_id': 'HopexAPI',
            'client_secret': 'secret',
            'environmentId': environmentId
        };
        var formBody = [];
        for (var property in details) {
            if (details.hasOwnProperty(property)) {
                var encodedKey = encodeURIComponent(property);
                var encodedValue = encodeURIComponent(details[property]);
                formBody.push(encodedKey + '=' + encodedValue);
            }
        }
        formBody = formBody.join('&');
        return fetch(url,
                {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    },
                    body: formBody
                })
            .then((response) => response.json())
            .then((responseJson) => {
                return responseJson.access_token;
            })
            .catch((error) => {
                console.error(error);
            });
    }

    function updateURL() {
    }

    // Defines a GraphQL fetcher using the fetch API. You're not required to
    // use fetch, and could instead implement graphQLFetcher however you like,
    // as long as it returns a Promise or Observable.
    function graphQLFetcher(graphQLParams) {
        return getToken(uasUrl, environmentId, login, password)
            .then((token) => {
                return fetch('/hopexgraphql/api/@Model.Schemas.SelectedValue',
                    {
                        method: 'POST',
                        headers: {
                            'Authorization': 'Bearer ' + token,
                            'x-hopex-context': '{"EnvironmentId":"' +
                                environmentId +
                                '","RepositoryId":"' +
                                repositoryId +
                                '","ProfileId":"' +
                                profileId +
                                '"}',
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(graphQLParams),
                        credentials: 'include'
                    }).then(function(response) {
                    return response.text();
                }).then(function(responseBody) {
                    try {
                        return JSON.parse(responseBody);
                    } catch (error) {
                        return responseBody;
                    }
                });
            });
    }

    function voyager() {
        location.href = '/hopexgraphql/home/voyager/@Model.Schemas.SelectedValue';
    }

    var main = React.createElement(GraphiQL,
        {
            fetcher: graphQLFetcher,
            query: parameters.query,
            variables: parameters.variables,
            operationName: parameters.operationName,
            onEditQuery: onEditQuery,
            onEditVariables: onEditVariables,
            onEditOperationName: onEditOperationName
        },
        React.createElement(GraphiQL.Toolbar, null,
            React.createElement(GraphiQL.Select, {
                label: 'Schema', onSelect: (schema) => {
                    window.location = '/hopexgraphql/home/index/' + schema;
                }
            },
                React.createElement(GraphiQL.SelectOption, { label: '@Model.Schemas.SelectedValue', value: '@Model.Schemas.SelectedValue'}),
                @foreach (var schema in Model.Schemas.Items)
                {
                    if (schema != Model.Schemas.SelectedValue)
                    {
                        <text>React.createElement(GraphiQL.SelectOption, { label: '@schema', value: '@schema'}),</text>
                    }
                }
            ),
            React.createElement(GraphiQL.Button, { label: 'Voyager', onClick: () => voyager() })
        )
    );

    ReactDOM.render(
        main,
        document.getElementById('graphiql')
    );

    function trimEnd(myString, charToRemove) {
        if (myString.charAt(myString.length - 1) === charToRemove) {
            myString = myString.substr(0, myString.length - 1);
        }
        return myString;
    }

    </script>

</body>

</html>
