@model Mega.WebService.GraphQL.Models.HopexInfo

<!DOCTYPE html>

<html>

<head>

    <style>
        body {
            height: 100%;
            margin: 0;
            width: 100%;
            overflow: hidden;
        }

        #voyager {
            height: 100vh;
        }

        .toolbar-button {
            background: #fdfdfd;
            background: linear-gradient(#f9f9f9, #ececec);
            border-radius: 3px;
            box-shadow: inset 0 0 0 1px rgba(0, 0, 0, 0.20), 0 1px 0 rgba(255, 255, 255, 0.7), inset 0 1px #fff;
            color: #555;
            cursor: pointer;
            display: inline-block;
            margin: 10px;
            padding: 3px 11px 5px;
            text-decoration: none;
            text-overflow: ellipsis;
            white-space: nowrap;
            max-width: 150px;
        }
    </style>

    <!--
    This GraphQL Voyager example depends on Promise and fetch, which are available in
    modern browsers, but can be "polyfilled" for older browsers.
    GraphQL Voyager itself depends on React DOM.
    If you do not want to rely on a CDN, you can host these files locally or
    include them directly in your favored resource bunder.
    -->
    <script src="~/Content/lib/es6-promise/es6-promise.auto.min.js"></script>
    <script src="~/Content/lib/fetch/fetch.min.js"></script>
    <script src="~/Content/lib/react/umd/react.production.min.js"></script>
    <script src="~/Content/lib/react-dom/umd/react-dom.production.min.js"></script>

    <!--
    These two files are served from jsDelivr CDN, however you may wish to
    copy them directly into your environment, or perhaps include them in your
    favored resource bundler.
    -->
    <link rel="stylesheet" href="~/Content/lib/graphql-voyager/dist/voyager.css" />
    <script src="~/Content/lib/graphql-voyager/dist/voyager.min.js"></script>

</head>

<body>

    <a class="toolbar-button" href="/hopexgraphql/home/index/@Model.Schemas.SelectedValue">Home</a>
    @Html.DropDownList("Schema", Model.Schemas, new { @onchange = "switchSchema(this.value)" })

    <div id="voyager">Loading...</div>

    <script>

        var uasUrl = '@Model.UasUrl';
        var clientId = '@Model.ClientId';
        var clientSecret = '@Model.ClientSecret';
        var scopes = '@Model.Scopes';
        var environmentId = '@Model.EnvironmentId';
        var repositoryId = '@Model.RepositoryId';
        var profileId = '@Model.ProfileId';
        var login = '@Model.Login';
        var password = '@Model.Password';

        function switchSchema(schema) {
            window.location.href = '/hopexgraphql/home/voyager/' + schema;
        }

        function getToken(url, environmentId, login, password) {
            var details = {
                'grant_type': 'password',
                'scope': scopes,
                'username': login,
                'password': password,
                'client_id': clientId,
                'client_secret': clientSecret,
                'environmentId': environmentId
            };
            var formBody = [];
            for (var property in details) {
                if (details.hasOwnProperty(property)) {
                    var encodedKey = encodeURIComponent(property);
                    var encodedValue = encodeURIComponent(details[property]);
                    formBody.push(encodedKey + "=" + encodedValue);
                }
            }
            formBody = formBody.join("&");
            return fetch(url,
                    {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded'
                        },
                        body: formBody
                    })
                .then((response) => response.json())
                .then((responseJson) => {
                    return responseJson.access_token;
                })
                .catch((error) => {
                    console.error(error);
                });
        }

        // Defines a GraphQL introspection fetcher using the fetch API. You're not required to
        // use fetch, and could instead implement introspectionProvider however you like,
        // as long as it returns a Promise
        // Voyager passes introspectionQuery as an argument for this function
        function introspectionProvider(introspectionQuery) {
            // This example expects a GraphQL server at the path /graphql.
            // Change this to point wherever you host your GraphQL server.
            return getToken(uasUrl, environmentId, login, password)
                .then((token) => {
                    return fetch('/hopexgraphql/api/@Model.Schemas.SelectedValue',
                    {
                        method: 'POST',
                        headers: {
                            'Authorization': 'Bearer ' + token,
                            'x-hopex-context': '{"EnvironmentId":"' +
                                environmentId +
                                '","RepositoryId":"' +
                                repositoryId +
                                '","ProfileId":"' +
                                profileId +
                                '"}',
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ query: introspectionQuery }),
                        credentials: 'include'
                    }).then(function(response) {
                    return response.text();
                }).then(function(responseBody) {
                    try {
                        return JSON.parse(responseBody);
                    } catch (error) {
                        return responseBody;
                    }
                });
            });
        }

        // Render <Voyager /> into the body.
        GraphQLVoyager.init(document.getElementById('voyager'),
            {
                introspection: introspectionProvider
            });

    </script>

</body>

</html>
